# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world dumbass!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          pwd
          ls -ltra
          # -e exits if any of the lines fails
          # -x prints each command that is going to be executed with a little plus
          set -ex

          # SET THE FOLLOWING VARIABLES
          REGISTRY=bigsilver07
          IMAGE=my-mkdocs-site
          TAG=1.0

          docker build -t $REGISTRY/$IMAGE:$TAG .

          set -ex

          docker run --rm -p 8000:8000 -v ${PWD}:/app --name my-docs -d bigsilver07/my-mkdocs-site:1.0 

      - name: Push to DockerHub
        uses: docker/build-push-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
          repository: bigsilver07/my-mkdocs-site
          tags: latest, ${{ github.run_number }}

      - name: Install MkDocs and Material Theme
        run: |
            pip install mkdocs
            pip install mkdocs-material

      - name: Lint YAML
        run: yamllint mkdocs.yml

      - name: Verify Scan Tool
        run: which scan || echo "Scan command not found in PATH"
        
      - name: Run Link Checker
        env:
          WEBSITE_URL: https://amazing-pudding-ee3b09.netlify.app/
        run: |
          check_link() {
          local url=$1
          http_code=$(curl -o /dev/null --silent --head -L --write-out '%{http_code}\n' "$url")
          if [ "$http_code" -eq 200 ]; then
            echo "ok - $url"
          else
            echo "Broken Link ($http_code) - $url"
            exit 1 # fail the workflow for the presence of defective url's 
          fi 
          }
          
          #check if URL is provided
          if [ -z "$WEBSITE_URL" ]; then 
          echo "WEBSITE_URL environment variable is not set."
          exit 1
          fi 

          #fetch all href links from our website
          links=$(curl -s "$WEBSITE_URL" | grep -oP '(?<=href=")[^"]*')


          #loop through each link, checking their status
          for link in $links; do
            # handle relative links by prepending the base URL
            if [[ "$link" =~ ^/ ]]; then 
              # Append the relative path to the /mysite/ base URL 
              if [[ ! "$link" =~ /$ ]]; then 
                link="$WEBSITE_URL${link#/}/"
              else
                link="$WEBSITE_URL${link#/}"
              fi
            fi

            # skipping internal anchors
            if [[ ! "$link" = "#" ]]; then 
              check_link "$link"
            fi 
          done

          
          
          
          



  

  
  
          

  

      




